
import streamlit as st
import pandas as pd
import plotly.express as px
from playwright.sync_api import sync_playwright
from io import BytesIO
import base64

# Fun√ß√£o para extrair dados reais de an√∫ncios do Airbnb usando Playwright
def extract_data_from_links(links):
    extracted_data = []
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        context = browser.new_context()
        for link in links:
            try:
                page = context.new_page()
                page.goto(link, timeout=60000)
                page.wait_for_timeout(5000)

                title = page.title()
                preco_selector = '._tyxjp1'
                localizacao_selector = '._1tanv1h'
                avaliacao_selector = '._17p6nbba'
                reviews_selector = '._1iu38lrc'

                preco = page.locator(preco_selector).first.inner_text(timeout=3000)
                localizacao = page.locator(localizacao_selector).first.inner_text(timeout=3000)
                avaliacao = page.locator(avaliacao_selector).first.inner_text(timeout=3000)
                reviews = page.locator(reviews_selector).first.inner_text(timeout=3000)

                extracted_data.append({
                    'Link': link,
                    'Nome': title,
                    'Pre√ßo por noite (R$)': preco,
                    'Localiza√ß√£o': localizacao,
                    'Avalia√ß√£o': avaliacao,
                    'N¬∫ de Reviews': reviews
                })

                page.close()
            except Exception as e:
                extracted_data.append({
                    'Link': link,
                    'Erro': str(e)
                })
        browser.close()
    return pd.DataFrame(extracted_data)

# Fun√ß√£o para exportar para Excel
def export_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Airbnb')
        writer.save()
    return base64.b64encode(output.getvalue()).decode()

# Interface Streamlit
st.set_page_config(page_title="Dashboard Airbnb", layout="wide")
st.title("üìä An√°lise Inteligente de An√∫ncios do Airbnb")

link_input = st.text_area("Cole os links dos an√∫ncios (um por linha):")

if st.button("Analisar"):
    links = [l.strip() for l in link_input.strip().split('\n') if l.strip()]
    if links:
        df = extract_data_from_links(links)

        st.subheader("üìã Dados Extra√≠dos")
        st.dataframe(df)

        if 'Erro' not in df.columns:
            try:
                df['Pre√ßo por noite (R$)'] = df['Pre√ßo por noite (R$)'].str.replace("R$", "").str.replace(".", "").str.replace(",", ".").astype(float)
                df['Avalia√ß√£o'] = df['Avalia√ß√£o'].str.replace(",", ".").astype(float)
                df['N¬∫ de Reviews'] = df['N¬∫ de Reviews'].str.extract(r'(\d+)').astype(float)

                st.subheader("üìà Estat√≠sticas Gerais")
                preco_medio = df['Pre√ßo por noite (R$)'].mean()
                st.metric("Pre√ßo M√©dio por Noite", f"R$ {preco_medio:.2f}")
                st.metric("M√©dia de Avalia√ß√µes", f"{df['Avalia√ß√£o'].mean():.2f} ‚≠ê")

                fig_preco = px.bar(df, x='Nome', y='Pre√ßo por noite (R$)', title="Pre√ßos por An√∫ncio", text_auto=True)
                st.plotly_chart(fig_preco, use_container_width=True)

                fig_aval = px.bar(df, x='Nome', y='Avalia√ß√£o', title="Avalia√ß√£o dos An√∫ncios", text_auto=True)
                st.plotly_chart(fig_aval, use_container_width=True)

                st.subheader("üì§ Exportar Dados")
                excel_base64 = export_excel(df)
                href = f'<a href="data:application/octet-stream;base64,{excel_base64}" download="airbnb_analise.xlsx">üìÅ Baixar Excel</a>'
                st.markdown(href, unsafe_allow_html=True)

                st.subheader("üí° Sugest√µes Autom√°ticas")
                max_price = df['Pre√ßo por noite (R$)'].max()
                st.info(f"Voc√™ poderia cobrar at√© R$ {max_price * 1.1:.2f} por noite se estiver acima da m√©dia e bem avaliado.")

                low_rated = df[df['Avalia√ß√£o'] < 4.5]
                if not low_rated.empty:
                    st.warning("An√∫ncios com avalia√ß√£o abaixo de 4.5 podem melhorar a descri√ß√£o, fotos ou servi√ßos.")

            except Exception as e:
                st.warning(f"Erro na an√°lise: {e}")
    else:
        st.warning("Por favor, insira ao menos um link.")
